

T_PuschIDFTProcParaIn *gaptPuschIDFTProcParaIn[APP_MAX_ULCELL_NUM]
__attribute__((section(".dsect APP_PuschIdft_Frame_L1D")));
T_PuschIDFTProcDataIn *gaptPuschIDFTProcDataIn[APP_MAX_ULCELL_NUM]
__attribute__((section(".dsect APP_PuschIdft_Frame_L1D")));
T_PuschIDFTProcBuffer *gaptPuschIDFTProcBuffer[APP_MAX_ULCELL_NUM]
__attribute__((section(".dsect APP_PuschIdft_Frame_L1D")));
T_PuschIDFTProcDataOut *gaptPuschIDFTProcDataOut[APP_MAX_ULCELL_NUM]
__attribute__((section(".dsect APP_PuschIdft_Frame_L1D")));
UINT16 gwDftInitTabCnt
__attribute__((section(".dsect APP_PuschIdft_Frame_L1D")));
CMPL16 *gapxwIDFTDataIn[2]
__attribute__((section(".dsect APP_PuschIdft_Frame_L1D")));
UINT32 gadIdftInTransID[8]//每个核最多完成2cell*4Layer
__attribute__((section(".dsect APP_PuschIdft_Frame_L1D")));
UINT32 gaudIdftInitTransID[PUSCH_EQU_IDFT_MAXNUM*2]
__attribute__((section(".dsect APP_PuschIdft_Frame_L1D")));
const UINT8 TAB_IDFT_LAYERNUM_MM[4][8]
__attribute__((section(".dsect APP_PuschIdft_Frame_L1D")))
= {
{1,2,2,2,2,2,2,2},
{0,0,1,2,2,2,2,2},
{0,0,0,0,1,2,2,2},
{0,0,0,0,0,0,1,2}};

UINT8 gaucDftIdx[PUSCH_EQU_IDFT_MAXNUM]
__attribute__((section(".dsect APP_PuschIdft_Frame_L1D")));
UINT8 gucDftPointCnt
__attribute__((section(".dsect APP_PuschIdft_Frame_L1D")));
void App_PuschPreIdft_Proc(
		UINT32 udCoreId,
		UINT32 udBPQMode)
__attribute__((section(".csect APP_PuschIdft_Frame_L2C")));
void App_PuschPreIdft_Proc(
		UINT32 udCoreId,
		UINT32 udBPQMode)
{
	UINT8 ucCellCnt,ucCellIdx;
	UINT8 ucUeCnt;
	UINT8 *pucInitDftPnt;
	UINT8 *pucInitDftPntActv;
	UINT8 ucDftIdx;
	UINT8 aucDuplicate[34];
	UINT8 ucDftCnt;
    UINT8 ucLayerCnt;
	UINT8 ucLayerNum = 0;
	T_PuschUESchdInfo	*ptPuschUESchdInfo;

	gucDftPointCnt = 0;
    gudIdftNLayer = 0;
    memset(aucDuplicate,0,34);
	memset(gaucDftIdx,0,20);
	memset((UINT8 *)gaucInitDftPnt,	0xFF,APP_MAX_ULCELL_NUM * MAX_PUSCH_UE_NUM_PER_TTI);

	for(ucCellCnt = 0; ucCellCnt < gucPuschIdftBitCellNum; ucCellCnt++)
	{
		ucCellIdx = gaucPuschCellIdx[ucCellCnt];
		*gpudPuschDbgDot[ucCellIdx] = 101;
		pucInitDftPnt = gaucInitDftPnt[ucCellIdx];
		pucInitDftPntActv = gaucInitDftPntActv[ucCellIdx];

        /*为IDFT计算每一个Layer对应的均衡数据地址，目的简化IDFT流水*/
        if ((0 == udBPQMode) || (1 == udBPQMode))
        {
            gudIdftNLayer = gudIdftNLayer + gaptPuschUETypeInfo[ucCellIdx]->ucLayerNum;//Idft需要完成的流数
            gauCellLayerNum[ucCellCnt] = gaptPuschUETypeInfo[ucCellIdx]->ucLayerNum;
            for (ucLayerCnt = 0; ucLayerCnt < gaptPuschUETypeInfo[ucCellIdx]->ucLayerNum; ucLayerCnt++)
            {
                gapxwEquTbOut[ucLayerNum] = gapxwEquOut[gaptCellDemInfo[ucCellIdx]->wSfnSubFrm & 1][ucCellIdx][ucLayerCnt];
				if(0 == ucLayerCnt)
				{
					gapxwIdftTbOut[ucLayerNum] = gapxwPucchDataIn[ucCellIdx];
				}
				else
				{
					gapxwIdftTbOut[ucLayerNum] = gapxwEquTbOut[ucLayerNum];
				}
				ucLayerNum ++;
            }
        }
        else if ((2 == udBPQMode) || (3 == udBPQMode) || (5 == udBPQMode))
        {
            gudIdftNLayer = (0 < gaptPuschUETypeInfo[ucCellIdx]->ucLayerNum)? 
				(TAB_IDFT_LAYERNUM_MM[udCoreId][(gaptPuschUETypeInfo[ucCellIdx]->ucLayerNum-1)&0x7]) : 0;
            gauCellLayerNum[0] = gudIdftNLayer;
			if(5 == udBPQMode)
			{
				for (ucLayerCnt = 0; ucLayerCnt < gudIdftNLayer; ucLayerCnt++)
	            {
	                gapxwEquTbOut[ucLayerNum] = gapxwEquOut[gaptCellDemInfo[ucCellIdx]->wSfnSubFrm & 1][ucCellIdx][ucLayerCnt + 2 * gudCoreId];
					ucLayerNum ++;
	            }
			}
        }

		for(ucUeCnt = 0; ucUeCnt < (gaptDemoElemNum[ucCellIdx]->ucPuschUeNum + gaptDemoElemNum[ucCellIdx]->ucCooperCellUserNum); ucUeCnt++)
		{
			ptPuschUESchdInfo = gaptPuschUESchdInfo[ucCellIdx] + ucUeCnt;
			if(((1 == ptPuschUESchdInfo->ucMeasOnlyFlag)||((1 == ptPuschUESchdInfo->ucUeCoOperType)&&(3 != ptPuschUESchdInfo->ucCoOperFlag)))
                || (((2 == udBPQMode) || (3 == udBPQMode)) && (ptPuschUESchdInfo->ucMimoIdx != 2*udCoreId) && (ptPuschUESchdInfo->ucMimoIdx != (2*udCoreId+1))))
			{
				continue;
			}
			*(pucInitDftPnt + ucUeCnt) = TAB_RBNUM_IDX34_UINT8[ptPuschUESchdInfo->ucRbNum];
			ucDftIdx = *(pucInitDftPnt + ucUeCnt);
			if((0 == aucDuplicate[ucDftIdx]) && (0xff != ucDftIdx))
			{
				gaucDftIdx[gucDftPointCnt] = ucDftIdx;
				gucDftPointCnt ++;
				aucDuplicate[ucDftIdx] = 1;
			}

			/* 找出当前UE的IDFT点数所对应的激活索引 */
			for (ucDftCnt = 0; ucDftCnt < gucDftPointCnt; ucDftCnt++)
			{
				if (gaucDftIdx[ucDftCnt] == ucDftIdx)
				{
					*(pucInitDftPntActv + ucUeCnt) = ucDftCnt;
					break;
				}
			}
		}
		*gpudPuschDbgDot[ucCellIdx] = 102;
	}
	if(0 < gudIdftNLayer)
	{
		if(0 < gucDftPointCnt)
		{
		    CEVA_DFT_GENERIC_INIT(gucDftPointCnt,gaucDftIdx,gaptPuschIDFTProcDataIn[0]->psdInitDftBuffer);
		}
		*gpudPuschDbgDot[0] = 103;
        gatDDmaLinkCpyParam[0].pEaddr = (UINT8 *)gapxwEquTbOut[0];
        gatDDmaLinkCpyParam[0].pIaddr = (UINT8 *)gapxwIDFTDataIn[0];
		gatDDmaLinkCpyParam[0].udSize = 12 * 1200 * sizeof(CMPL16);
		gatDDmaLinkCpyParam[0].udDirection = 0;

        OSS_DDMA_LinkCopy(
            gudQmanQueHdl,
            gatDDmaLinkCpyParam,
            1,
            &gadIdftInTransID[0]);
		*gpudPuschDbgDot[0] = 104;
	}
}

void App_PuschIdft_Tb(
		T_PuschIDFTProcDataIn *ptPuschIDFTProcDataIn,
		T_PuschIDFTProcDataOut *ptPuschIDFTProcDataOut,
		UINT32 udCoreId,
		UINT8 ucCellIdx,
		UINT8 ucTbIdx,
		UINT8 ucWaitLayerIdx)
__attribute__((section(".csect APP_PuschIdft_Frame_L1C")));
void App_PuschIdft_Tb(
		T_PuschIDFTProcDataIn *ptPuschIDFTProcDataIn,
		T_PuschIDFTProcDataOut *ptPuschIDFTProcDataOut,
		UINT32 udCoreId,
		UINT8 ucCellIdx,
		UINT8 ucTbIdx,
		UINT8 ucWaitLayerIdx)
{
	UINT32 udIDFTTandsID;
	UINT16 uwRet;
	UINT32 udCycle,udCycle0;
	T_LinkCpyParam atLinkCpyParam[2];

	if(1 == gtULCycle.udCycleFlag0)
	{
		udCycle = OSS_CLK_GetCycle();
	}
    OSS_DDMA_LinkWait(
        gudQmanQueHdl,
        gadIdftInTransID[ucWaitLayerIdx]);
    
	if(1 == gtULCycle.udCycleFlag0)
	{
		udCycle0 = OSS_CLK_GetCycle();
		gtULCycle.udIdftWtTb[gtULCycle.udLayerNum] = udCycle0 - udCycle;
	}
	*gpudPuschDbgDot[ucCellIdx] = 108;
	if(0 < gaptPuschUETypeInfo[ucCellIdx]->ucMergeUeNum)
	{
             atLinkCpyParam[0].pDst = gaptEquBuffer[ucCellIdx];
             atLinkCpyParam[0].pSrc = gapxwEquOut[gaptCellDemInfo[ucCellIdx]->wSfnSubFrm & 1][ucCellIdx][0];
             atLinkCpyParam[0].udSize = APP_MAX_RE_NUM * 12 *  sizeof(CMPL16); 
             gaudPuschEquSoftTransID[ucCellIdx] = OSS_MEM_DmaLinkCopy(gudCHHandle,atLinkCpyParam, 1, NULL, 0);
	}
    gaptPuschIDFTProcParaIn[ucCellIdx]->ucTBidx = 2*udCoreId + ucTbIdx;
	ptPuschIDFTProcDataOut->pxwIdftOut = ptPuschIDFTProcDataIn->pxwXrcOut;
	uwRet = OBM_PuschIDFTProc(
			gaptPuschIDFTProcParaIn[ucCellIdx],
			ptPuschIDFTProcDataIn,
			gaptPuschIDFTProcBuffer[ucCellIdx],
			ptPuschIDFTProcDataOut);
	if(1 != uwRet)
	{
	    gatULDebug[ucCellIdx].tPuschDebug.udIdftIdxErr++;
	    gatULDebug[ucCellIdx].tPuschDebug.udPuschErrorCode = uwRet;
		App_ULParaErrCatch(gudCoreId, ucCellIdx,uwRet);
	    gucPuschCellNum = 0;
		gucPuschIdftBitCellNum = 0;
		gucPuschReportBitACellNum = 0;
		if((3 == gudBPQMode) || (2 == gudBPQMode))
		{
			gptULL2D20->gucMMPuschCellNumL2 = 0;
		}
		return;
	}
	if(1 == gtULCycle.udCycleFlag0)
	{
		gtULCycle.udObmIdft[gtULCycle.udLayerNum] = OSS_CLK_GetCycle() - udCycle0;
		gtULCycle.udLayerNum ++;
	}
     
    gatDDmaLinkCpyParam[0].pEaddr = (UINT8 *)gapxwIdftTbOut[ucWaitLayerIdx];
	gatDDmaLinkCpyParam[0].pIaddr = (UINT8 *)ptPuschIDFTProcDataOut->pxwIdftOut;
	gatDDmaLinkCpyParam[0].udSize = 12 * 1200 * sizeof(CMPL16);
	gatDDmaLinkCpyParam[0].udDirection = 1;

    OSS_DDMA_LinkCopy(
        gudQmanQueHdl,
        gatDDmaLinkCpyParam,
        1,
        &udIDFTTandsID);
	*gpudPuschDbgDot[ucCellIdx] = 109;
}

void App_PuschIdft_Proc()
__attribute__((section(".csect APP_PuschIdft_Frame_L1C")));
void App_PuschIdft_Proc()
{
	UINT8 ucCycleFlag;
	UINT8 ucCellIdx;
    UINT8 ucCellCnt;
    UINT8 ucLayerCnt;
    UINT8 ucLayerNum = 1;
    UINT8 ucLoopNum;
    UINT32 udCoreId0;
	UINT32 udTransID = 0xffffffff;
	T_PuschIDFTProcDataIn *ptPuschIDFTProcDataIn;
	UINT32 udCycle;
    T_IdtData tIdtData[2];
    T_PuschIdtPara tDatPara;
	
	if(1 == gtULCycle.udCycleFlag0)
	{
		udCycle = OSS_CLK_GetCycle();
		gtULCycle.udLayerNum = 0;
	}
	if(0 == gudModpFlg)
	{
		gudModpIEBit[8] = BspGetGlobalState();	//获取全局中断的状态
	}
    if ((0 == gudBPQMode) || (1 == gudBPQMode))
    {
        udCoreId0 = 0;
    }
    else
    {
        udCoreId0 = gudCoreId;
    }
	if((0 < gudIdftNLayer) && (gucDftPointCnt > 0))
	{
     	OSS_DDMA_LinkWait(
            gudQmanQueHdl,
            gaudIdftInitTransID[gwDftInitTabCnt - 1]);
		*gpudPuschDbgDot[0] = 87;
		CEVA_DFT_GENERIC_INIT1(
			gucDftPointCnt,
			gaucDftIdx,
			gaptPuschIDFTProcDataIn[0]->psdInitDftBuffer);
		*gpudPuschDbgDot[0] = 88;
		if(0 < gucMergCellNum)
		{
			gatDDmaLinkCpyParam[0].pEaddr = gaudIdftInitBufferDDR;
			gatDDmaLinkCpyParam[0].pIaddr = gaptPuschIDFTProcDataIn[0]->psdInitDftBuffer;
			gatDDmaLinkCpyParam[0].udSize = 6500 * 4;
			gatDDmaLinkCpyParam[0].udDirection = 1;

			OSS_DDMA_LinkCopy(
				gudQmanQueHdl,
				gatDDmaLinkCpyParam,
				1,
				&udTransID);
		}
	}
    if (1 == gudIdftNLayer)
    {
        ucCellIdx = gaucPuschCellIdx[0];
		*gpudPuschDbgDot[ucCellIdx] = 89;
        ptPuschIDFTProcDataIn = gaptPuschIDFTProcDataIn[ucCellIdx];
        ptPuschIDFTProcDataIn->pxwXrcOut = gapxwIDFTDataIn[0];
        App_PuschIdft_Tb(
			ptPuschIDFTProcDataIn,
			gaptPuschIDFTProcDataOut[ucCellIdx],
		    udCoreId0,
			ucCellIdx,
			0,
			0);
		*gpudPuschDbgDot[ucCellIdx] = 90;
		/*Idt Prob*/
		tDatPara.ucLayerNum = 1;
		PHX_Idt(6,guwUlSfn,0,ucCellIdx,&tIdtData[0],&tDatPara);
		/*Idt Prob end*/
		
    }
    else if(1 < gudIdftNLayer)
    {
        for (ucCellCnt = 0; ucCellCnt < gucPuschIdftBitCellNum; ucCellCnt++)
        {
            ucCellIdx = gaucPuschCellIdx[ucCellCnt];
			*gpudPuschDbgDot[ucCellIdx] = 91;
            for (ucLayerCnt = 0; ucLayerCnt < gauCellLayerNum[ucCellCnt]; ucLayerCnt++)
            {
                if (gudIdftNLayer != ucLayerNum)
                {
                    gatDDmaLinkCpyParam[0].pEaddr = gapxwEquTbOut[ucLayerNum];
    			    gatDDmaLinkCpyParam[0].pIaddr = (UINT8 *)gapxwIDFTDataIn[ucLayerNum&0x1];
    			    gatDDmaLinkCpyParam[0].udSize = 12 * 1200 * sizeof(CMPL16);
    			    gatDDmaLinkCpyParam[0].udDirection = 0;
                
                    OSS_DDMA_LinkCopy(
                        gudQmanQueHdl,
                        gatDDmaLinkCpyParam,
                        1,
                        &gadIdftInTransID[ucLayerNum]);
                    ucLayerNum++;
                }
                else
                {
                    /*为bit级第一个TB准备数据*/
                    gatDDmaLinkCpyParam[0].pEaddr = gapxwIdftTbOut[0];
    			    gatDDmaLinkCpyParam[0].pIaddr = (UINT8 *)gapxwIDFTDataIn[gudIdftNLayer&0x1];
    			    gatDDmaLinkCpyParam[0].udSize = 12 * 1200 * sizeof(CMPL16);
    			    gatDDmaLinkCpyParam[0].udDirection = 0;
                    
                    OSS_DDMA_LinkCopy(
                        gudQmanQueHdl,
                        gatDDmaLinkCpyParam,
                        1,
                        &gaudTransID[0]);
                    ucLayerNum++;
                }

                ptPuschIDFTProcDataIn = gaptPuschIDFTProcDataIn[ucCellIdx];
                ptPuschIDFTProcDataIn->pxwXrcOut = gapxwIDFTDataIn[ucLayerNum&0x1];
                App_PuschIdft_Tb(
        			ptPuschIDFTProcDataIn,
        			gaptPuschIDFTProcDataOut[ucCellIdx],
		            udCoreId0,
        			ucCellIdx,
        			ucLayerCnt,
        			(ucLayerNum-2));
				/*Idt Prob*/
				tDatPara.ucLayerNum = ucLayerNum;
							
				PHX_Idt(6,guwUlSfn,ucLayerCnt,ucCellIdx,&tIdtData[0],&tDatPara);
				/*Idt Prob end*/
            }
            *gpudPuschDbgDot[ucCellIdx] = 92;
        }
    }
	if((0 < gudIdftNLayer) && (0 < gucMergCellNum) && (gucDftPointCnt > 0))
	{
		OSS_DDMA_LinkWait(
	        gudQmanQueHdl,
	        udTransID);
		*gpudPuschDbgDot[0] = 93;
	}

	App_PuschPreBit_Proc();
	if((1 == gtULCycle.udCycleFlag0) && (0 != gucPuschIdftBitCellNum))
	{
		gtULCycle.udIdftProc = OSS_CLK_GetCycle() - udCycle;
	}
}

